TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  acc_lim_theta: 2.0
  acc_lim_x: 2.0
  acc_lim_y: 2.0 #if it's not good change it to 1.5

  #Set the velocity limits of the robot
  max_vel_x: 0.3  #if its wrong change the max & min vel to 0.4 and -0.4
  min_vel_x: 0.05 # make sure min_vel_x * sim_time <2 * xy_goal_tolerance
  max_vel_y: 0.5                  #default : 0.1
  min_vel_y: -0.05                 #default : -0.1
  max_vel_theta: 1.5
  min_vel_theta: -1.0
  min_in_place_vel_theta: 1.0
  #y_vels: [-0.6, -0.24, 0.24, 0.6]
  controller_frequency: 15 #Hz

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.25
  
  #For this example, we'll use a holonomic robot
  holonomic_robot: true

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.1 # m
  yaw_goal_tolerance: 0.1 # rad
  latch_xy_goal_tolerance: false

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  sim_time: 2.5
  sim_granularity: 0.017 # meter
  vx_samples: 13
  vy_samples: 10
  vtheta_samples: 30

  #Parameters for scoring trajectories
  meter_scoring: true # true: unit is meter, false: cell
  path_distance_bias: 3.0 # max is 5
  goal_distance_bias: 3.2 # max is 5
  occdist_scale: 0.02
  heading_scoring: false
  heading_lookahead: 0.3 # meter
  heading_scoring_timestep: 0.5 # secs

  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: true

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.01

  #Eat up the plan as the robot moves along it
  prune_plan: true